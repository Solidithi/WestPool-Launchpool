generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Project {
  id                   String            @id @default(uuid())
  projectName          String
  projectOwnerAddress  String
  verifiedTokenAddress String            @unique
  projectLogo          String
  projectImage         String[]
  shortDescription     String
  longDescription      String
  acceptedVToken       String[]
  minStake             Int
  maxStake             Int
  fromDate             DateTime
  toDate               DateTime
  txHashCreated        String
  projectStatus        String
  chainName            String
  poolBudget           Int
  targetStake          Int
  projectOwner         ProjectOwner      @relation(fields: [projectOwnerAddress], references: [userAddress], onDelete: Cascade, onUpdate: Cascade)
  userId               String?
  offers               Offer[]
  invested             InvestedProject[]
}

// model AvailableNetwork {
//   id          String       @id @default(uuid())
//   networkName String
//   chainId     Int          @unique
//   networkLogo String
//   TokenData  TokenData[]
// }

// model TokenData {
//   id               String           @id @default(uuid())
//   TokenName       String
//   TokenSymbol     String
//   TokenDecimals   Int
//   TokenLogo       String
//   TokenAddress    String
//   chainId          Int
//   availableNetwork AvailableNetwork @relation(fields: [chainId], references: [chainId], onDelete: Cascade, onUpdate: Cascade) // Relation to AvailableNetwork
// }

model User {
  id           String            @id @default(uuid())
  userAddress  String            @unique
  offers       UserOffer[]
  invested     InvestedProject[]
  ProjectOwner ProjectOwner[]
  // projects    Project[]
  // offerId     String?
  // User        User?     @relation(fields: [userId], references: [id])
}

model ProjectOwner {
  id String @id @default(uuid())

  userAddress String    @unique
  User        User      @relation(fields: [userAddress], references: [userAddress], onDelete: Cascade, onUpdate: Cascade)
  Project     Project[]
}

//Offer model buy sell like premarket
model Offer {
  id                   String            @id @default(uuid())
  pricePerToken        Decimal
  amount               Int
  collateral           Int
  tokenImagePreToken   String
  tokenImageCollateral String
  offerType            OfferType
  startDate            DateTime
  filledTime           DateTime
  creatorStatus        CreateOfferStatus
  fillerStatus         FillerOfferStatus
  creatorAddress       String
  fillerAddress        String
  projectId            String
  project              Project           @relation(fields: [projectId], references: [id])
  users                UserOffer[]
}

model UserOffer {
  userId  String
  offerId String

  User  User  @relation(fields: [userId], references: [id])
  Offer Offer @relation(fields: [offerId], references: [id])

  @@id([userId, offerId])
}

model InvestedProject {
  userId    String
  projectId String

  User    User    @relation(fields: [userId], references: [id])
  Project Project @relation(fields: [projectId], references: [id])

  @@id([userId, projectId])
}

enum ProjectStatus {
  Upcoming
  Ongoing
  Completed
}

enum CreateOfferStatus {
  Open
  Pending
  Settled
  Canceled
  CanceledWithdraw
}

enum FillerOfferStatus {
  NotYet
  Pending
  Completed
  Canceled
  CanceledWithdraw
}

enum OfferType {
  Buy
  Sell
}
